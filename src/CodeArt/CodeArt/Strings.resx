<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentOutOfRange" xml:space="preserve">
    <value>{0} out of range</value>
  </data>
  <data name="CannotReturnPoolItem" xml:space="preserve">
    <value>This item is not lent and cannot be returned to the pool</value>
  </data>
  <data name="DisposePoolItemFailed" xml:space="preserve">
    <value>Discard and release items in the pool failed, the error occurred in a {0} instance</value>
  </data>
  <data name="NotFoundPoolItem" xml:space="preserve">
    <value>{0} did not find the corresponding item pool</value>
  </data>
  <data name="NotSupportedPoolFetchOrder" xml:space="preserve">
    <value>PoolFetchOrder {0} is not supported</value>
  </data>
  <data name="NoTypeDefined" xml:space="preserve">
    <value>No type {0} defined</value>
  </data>
  <data name="PoolItemHaveBeenLent" xml:space="preserve">
    <value>The item in the pool has been lent. This error indicates that the pool frame has a BUG, otherwise the error will not occur</value>
  </data>
  <data name="RepeatBorrowingPoolItem" xml:space="preserve">
    <value>This item has been loaned and cannot be lent again. This means that the {0} framework has BUG, please check the reason</value>
  </data>
  <data name="TypeMismatch" xml:space="preserve">
    <value>Type {0}| mismatch type: {1}</value>
  </data>
  <data name="TypeUnsafeConcurrentAccess" xml:space="preserve">
    <value>Type {0} is not concurrent access safe or does not set SafeAccessAttribute</value>
  </data>
  <data name="OnlySupportedTypes" xml:space="preserve">
    <value>Support type {0} only</value>
  </data>
  <data name="TypeUnAppSessionAccess" xml:space="preserve">
    <value>Type {0} is not appSession access or does not set AppSessionAccessAttribute</value>
  </data>
  <data name="NoPropertyDefined" xml:space="preserve">
    <value>Property {0} is not defined on type {1}</value>
  </data>
  <data name="InvalidPeriod" xml:space="preserve">
    <value>Invalid timing time, beyond the scope of system support</value>
  </data>
  <data name="UnableStartMediaTimer" xml:space="preserve">
    <value>Unable start media timer</value>
  </data>
  <data name="NoSymbiosis" xml:space="preserve">
    <value>There is no symbiosis, please check whether manually open the symbiosis</value>
  </data>
  <data name="DTOReadOnly" xml:space="preserve">
    <value>The operation can not be performed in read-only mode</value>
  </data>
  <data name="PreApplicationStartNoStatic" xml:space="preserve">
    <value>PreApplicationStartAttribute call method {0}. {1} must be static</value>
  </data>
  <data name="DTONotSpecifyType" xml:space="preserve">
    <value>Entry {0} does not specify type information</value>
  </data>
  <data name="DTOListTypeCountError" xml:space="preserve">
    <value>There can be only one member definition for a collection {0}</value>
  </data>
  <data name="NoAppSession" xml:space="preserve">
    <value>Did not set the implementation of AppSession, can not use the application to answer</value>
  </data>
  <data name="FutureResultNotValid" xml:space="preserve">
    <value>The result is not valid because the future &lt;{0}&gt; instance has been canceled</value>
  </data>
  <data name="FutureCompleteError" xml:space="preserve">
    <value>In the completion method, you can not specify that the status is not completed (Incomplete)</value>
  </data>
  <data name="UnknownErrorOccurred" xml:space="preserve">
    <value>An unknown error occurred</value>
  </data>
  <data name="NoInterfaceImpl" xml:space="preserve">
    <value>There is no implementation of interface {0} that can not get an instance</value>
  </data>
  <data name="PreApplicationEndNoStatic" xml:space="preserve">
    <value>PreApplicationEndAttribute call method {0}. {1} must be static</value>
  </data>
  <data name="TransformExpressionError" xml:space="preserve">
    <value>Transform expression error</value>
  </data>
  <data name="NodeNoAttribute" xml:space="preserve">
    <value>{0} node, there is no {1} attribute defined</value>
  </data>
  <data name="CompileError" xml:space="preserve">
    <value>Compile error</value>
  </data>
  <data name="NotFoundTenant" xml:space="preserve">
    <value>No information for tenant {0} was found</value>
  </data>
  <data name="ProApplicationStartedNoStatic" xml:space="preserve">
    <value>ProApplicationStartedAttribute call method {0}. {1} must be static</value>
  </data>
</root>